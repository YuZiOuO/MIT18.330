---
theme: Antibes
mainfont: Helvetica
monofont: 'Source Code Pro'
monofontoptions: 'Scale=0.8'

colorlinks: true
linkcolor: white
urlcolor: cyan

header-includes: |
    \usepackage{unicode-math}
---


# 18.330 Problem set 6 (spring 2020)

## Submission deadline: 11:59pm on Tuesday, April 7

### Exercise 1: Runge--Kutta methods

1. Consider a Runge--Kutta method starting at $(t_n, x_n)$ that takes an Euler step
of length $h/2$ to $(t_{n+1/2}, x_{n+1/2})$ and then uses the new evaluation
at that point to take a complete Euler step from $(t_n, x_n)$
of length $h$.

    Find the order of this method and write down its Butcher tableau. We will refer to it as the "midpoint method".

2. Define a type `RKMethod` to represent a general explicit Runge--Kutta method defined by a [Butcher tableau](https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods#Explicit_Runge%E2%80%93Kutta_methods) as follows:

    ```jl
    struct RKMethod{T}
        c::Vector{T}
        b::Vector{T}
        a::Matrix{T}
        s::Int  # number of stages
    end
    ```

    Make it into a function by completing the function

    ```jl
    function (method::RKMethod)(f, x, t, h)
        ...
    end
    ```

    to execute one step of the corresponding Runge--Kutta method with initial condition $x$ at time $t$ and step size $h$. Your code should work for both scalar and vector $x$ and a possibly vector-valued function $f = f(t, x)$ (Assume that $a$ is a lower-triangular matrix, corresponding to an explicit method.)


3. Define RK methods `euler`, `midpoint` and `RK4` using their respective tableaus.

4. Write a routine `integrate` with the signature

    ```
    function integrate(method, f, x0, t0, t_final, h)
    ```

    where `method` is a RK method as defined above and $h$ is a fixed step size.

    Make sure that the final step lands exactly at the final time by taking that final step as a special case.


5. Use each method on the ODE $\dot{x} = 1.5x$ with $x_0 = 2$ and integrate from $t=0$ for a time $t_\text{final} = 3$.

    Find the rate of convergence of the numerical solution to the exact solution as $h \to 0$ for each method. Do they correspond to our analytical expectations?

6. Even Runge--Kutta methods may not be good enough without adaptivity: consider the ODE

    $$\dot{u}(t) = \exp \left[t - u \, \sin(u) \right].$$

    Integrate it using RK4 from $t=0$ to $t=5$ with a step size $h=10^{-2}$. Now integrate it with a step size $h = 10^{-3}$.

    Plot both solutions $x(t)$ as a function of $t$.
    What do you observe? What do you think is happening?



### Exercise 2: Adaptivity in the Euler method

In this exercise we will invetigate adaptivity in ODE solvers by taking the simplest case: an adaptive Euler method.

1. Consider one step of the Euler method. Write down the local (single-step) error in terms of the step size $h$ and the unknown constant $C$. Call the approximation obtained at the end of the step $x^{(1)}$.

2. Now consider taking two consecutive Euler steps of size $h/2$. Would you expect this to give a better or a worse approximation to the true solution? Write down the total error after taking the two steps, assuming that the constant $C$ is the same for both. Call the approximation at the end of this combined step $x^{(2)}$.

3. Define $\Delta x$ as the difference between the two approximations. Use this to find the step size $h'$ that will give an error per unit time of a given size $\epsilon$.

4. Use this derivation to write an adaptive Euler integrator `adaptive_euler(f, t0, t_final, epsilon)` that tries to keep the global error less than $\epsilon$, using an update rule similar to the one we discussed in class. Add a multiplicative factor $0.9$ to that rule to make the method behave better.

5. Use it to integrate the same ODE as in exercise 1. Plot
the step size taken as a function of time.

6. Now integrate the equation for the van der Pol oscillator:

    $$
    \ddot{x} -\mu (1-x^{2}) \dot{x} + x = 0,
    $$
    with $\mu = 5$. Use initial conditions $x_0 = 0$ and $\dot{x}_0 = 1$.

7. Plot trajectories in $(x, \dot{x})$ phase space and (separately) the solution $x(t)$ as a function of $t$.

8. Plot the step size as a function of time. What do you observe? How do you interpret this?


#### Exercise 3: SIR model

In this exercise we will study the SIR model of the dynamics of an infectious disease outbreak ("epidemic") in a population.

1. Use e.g. RK4 to solve the SIR equations:

    \begin{align}
    \dot{S} &= -\beta S \, I \\
    \dot{I} &= \beta S \, I  - \gamma I \\
    \dot{R} &= \gamma I
    \end{align}

    Here $I$ is the proportion of the population which is infectious.  $\beta$ is the rate of contact between susceptible and infectious individuals, and $\gamma$ the recovery rate.

    Use $S_0 = 0.99$ and $I_0 = 0.01$.

2.  Make an interactive visualization, varying $\beta$ and $\gamma$ in, say, the range $0$ to $1$.

3. What do you observe? Can you interpret this?

4. By summing the equations we see that $S + I + R$ should be constant (equal to the total population, assuming no births or deaths).
For representative parameter values $\beta = 0.1$ and $\gamma = 0.05$, how well does the numerics conserve this quantity?
